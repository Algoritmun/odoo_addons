-
  I update expense account for ASUStek supplier
-
  !record {model: res.partner, id: base.res_partner_asus}:
    property_account_payable: account.a_pay
-
  I confirm asset purchase for "account_asset_asset_digitalasset0"
-
  !python {model: account.asset.asset}: |
    self.confirm_asset_purchase(cr, uid, ref("account_asset_asset_digitalasset0"), context)
-
  I indicate a in-service date for asset "account_asset_asset_digitalasset0"
-
  !record {model: account.asset.asset, id: account_asset_asset_digitalasset0}:
    in_service_date: !eval time.strftime('%Y-%m-%d')
-
  I validate asset "account_asset_asset_digitalasset0"
-
  !python {model: account.asset.asset}: |
    self.validate(cr, uid, ref("account_asset_asset_digitalasset0"), context)
-
  I check the asset "account_asset_asset_digitalasset0" is open
-
  !assert {model: account.asset.asset, id: account_asset_asset_digitalasset0, string: Asset open after confirmation}:
    - state == 'open'
-
  I post the first accounting amortization line
-
  !python {model: account.asset.asset}: |
    accounting_depreciation_line = self.browse(cr, uid, ref("account_asset_asset_digitalasset0"), context).accounting_depreciation_line_ids[0]
    accounting_depreciation_line.post_depreciation_line()
-
  I post the first fiscal amortization line
-
  !python {model: account.asset.asset}: |
    fiscal_depreciation_line = self.browse(cr, uid, ref("account_asset_asset_digitalasset0"), context).fiscal_depreciation_line_ids[0]
    fiscal_depreciation_line.post_depreciation_line()
-
  I check the book value
-
  !assert {model: account.asset.asset, id: account_asset_asset_digitalasset0, string: Book value after amortization NOK}:
    - book_value == 67600.0
