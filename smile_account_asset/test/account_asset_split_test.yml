-
  I confirm asset purchase for "account_asset_asset_fixedasset0"
-
  !python {model: account.asset.asset}: |
    self.confirm_asset_purchase(cr, uid, ref("account_asset_asset_fixedasset0"), context)
-
  I indicate a in-service date and validate asset "account_asset_asset_fixedasset0"
-
  !python {model: account.asset.asset}: |
    import time
    asset_id = ref("account_asset_asset_fixedasset0")
    self.write(cr, uid, asset_id, {'in_service_date': time.strftime('%Y-%m-%d')}, context)
    self.validate(cr, uid, asset_id, context)
-
  I post the first accounting amortization line
-
  !python {model: account.asset.asset}: |
    accounting_depreciation_line = self.browse(cr, uid, ref("account_asset_asset_fixedasset0"), context).accounting_depreciation_line_ids[0]
    accounting_depreciation_line.post_depreciation_line()
-
  I post the first fiscal amortization line
-
  !python {model: account.asset.asset}: |
    fiscal_depreciation_line = self.browse(cr, uid, ref("account_asset_asset_fixedasset0"), context).fiscal_depreciation_line_ids[0]
    fiscal_depreciation_line.post_depreciation_line()
-
  I define the split of the asset "account_asset_asset_fixedasset0"
-
  !record {model: account.asset.split_wizard, id: account_asset_asset_splittest0}:
    asset_id: account_asset_asset_fixedasset0
    purchase_value: 20000.0
    salvage_value: 500.0
    quantity: 1.0
-
  I validate this split and check it
-
  !python {model: account.asset.split_wizard}: |
    asset_id = ref('account_asset_asset_fixedasset0')
    fields_to_read = ['purchase_value', 'salvage_value', 'quantity']
    asset_obj = self.pool.get('account.asset.asset')
    asset_initial_info = asset_obj.read(cr, uid, asset_id, fields_to_read, context)
    self.button_validate(cr, uid, ref('account_asset_asset_splittest0'), context)
    asset_new_info = asset_obj.read(cr, uid, asset_id, fields_to_read, context)
    new_asset_id = asset_obj.search(cr, uid, [], order='id', context=context)[-1]
    new_asset_info = asset_obj.read(cr, uid, new_asset_id, fields_to_read + ['parent_id'], context, '_classic_write')
    assert new_asset_info['parent_id'] == asset_initial_info['id'], \
      'Asset Split Failed, parent_id[%s] != origin_id[%s]' % (new_asset_info['parent_id'], asset_initial_info['id'])
    split_values = {'purchase_value': 20000.0, 'salvage_value': 500.0, 'quantity': 1.0}
    for field in fields_to_read:
      if field == 'quantity' and split_values[field] == asset_initial_info[field] == 1:
        continue
      assert asset_new_info[field] == asset_initial_info[field] - split_values[field], 'Asset Split Failed for %s field' % field
      assert new_asset_info[field] == split_values[field], 'Asset Split Failed for %s field' % field
    initial_asset = asset_obj.browse(cr, uid, asset_id, context)
    new_asset = asset_obj.browse(cr, uid, new_asset_id, context)
    for line in initial_asset.accounting_depreciation_line_ids + initial_asset.fiscal_depreciation_line_ids:
      if line.move_id:
        log('Depreciation Type = %s' % line.depreciation_type)
        amount_field = line.depreciation_type == 'fiscal' and 'accelerated_value' or 'depreciation_value'
        depreciation_value = sum([getattr(nline, amount_field) for nline in line.move_id.asset_depreciation_line_ids])
        log('Account Move Amount = %s' % line.move_id.amount)
        log('Depreciation Value Sum = %s' % depreciation_value)
        assert round(line.move_id.amount, 2) == round(depreciation_value, 2), 'Asset Split Failed - Depreciation Values Sum != Account Move Amount'
