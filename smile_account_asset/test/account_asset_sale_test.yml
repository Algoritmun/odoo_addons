-
  I first create a fiscalyear for the next year
-
  !python {model: account.fiscalyear}: |
    import time
    year = int(time.strftime('%Y')) + 1
    today = time.strftime('%Y-%m-%d')
    domain = [
      ('company_id', '=', ref('base.main_company')),
      ('date_start', '<=', today),
      ('date_stop', '>=', today),
    ]
    if not self.search(cr, uid, domain, context=context):
      fiscalyear_id = self.create(cr, uid, {
        'company_id': ref('base.main_company'),
        'name': 'Fiscal Year %s' % year,
        'code': 'FY%s' % year,
        'date_start': '%s-01-01' % year,
        'date_stop': '%s-12-31' % year,
      }, context)
      self.create_period(cr, uid, [fiscalyear_id], context)
-
  I sell asset "account_asset_asset_digitalasset0"
-
  !python {model: account.asset.asset}: |
    import time
    asset_id = ref("account_asset_asset_digitalasset0")
    self.write(cr, uid, asset_id, {
      'sale_date': '%s-%s' % (int(time.strftime('%Y')) + 1, time.strftime('%m-%d')),
      'sale_type': 'sale',
      'customer_id': ref("base.res_partner_agrolait"),
      'sale_value': 18000.0,
    }, context)
    self.button_confirm_asset_sale(cr, uid, asset_id, context)
-
  I check if state is close
-
  !assert {model: account.asset.asset, id: account_asset_asset_digitalasset0, string: Asset is sold}:
    - state == 'close'
-
  I output asset "account_asset_asset_digitalasset0"
-
  !python {model: account.asset.asset}: |
    asset_id = ref("account_asset_asset_digitalasset0")
    if not self.browse(cr, uid, asset_id, context).is_out:
      self.button_output(cr, uid, asset_id, context)
-
  I check account balance - INFO test valid only if no decomposition
-
  !python {model: account.move.line}: |
    asset = self.pool.get('account.asset.asset').browse(cr, uid, ref("account_asset_asset_digitalasset0"), context)
    balance = sum([line.credit - line.debit for line in asset.account_move_line_ids], 0.0)
    result = asset.sale_result - sum([l.accelerated_value for l in asset.fiscal_depreciation_line_ids])
    log('%s vs %s' % (balance, result))
    assert round(result, 2) == round(balance, 2), "Not Valid Account Move Lines"
