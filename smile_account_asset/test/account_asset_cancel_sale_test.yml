-
  I cancel the sale of the asset "account_asset_asset_digitalasset0"
-
  !python {model: account.asset.asset}: |
    asset_id = ref('account_asset_asset_digitalasset0')
    self.cancel_asset_sale(cr, uid, asset_id, context)
-
  I check if state is open
-
  !assert {model: account.asset.asset, id: account_asset_asset_digitalasset0, string: Asset is into service}:
    - state == 'open'
-
  I check if sale infos are empty
-
  !assert {model: account.asset.asset, id: account_asset_asset_digitalasset0, string: Asset into service with sale infos}:
    - not sale_date
    - not sale_value
    - not sale_type
    - not customer_id
-
  I check if depreciation board is ok
-
  !python {model: account.asset.asset}: |
    asset = self.browse(cr, uid, ref('account_asset_asset_digitalasset0'), context)
    depreciation_end_date = max([line.depreciation_date for line in asset.depreciation_line_ids])
    import time
    years = asset.accounting_annuities
    if time.strftime('%m-%d') == '01-01' or asset.exceptional_depreciation_line_ids:
      years -= 1
    end_date = '%s-12-31' % (int(time.strftime('%Y')) + years)
    log("Depreciation board end date = %s" % depreciation_end_date)
    log("Logical end date = %s" % end_date)
    assert depreciation_end_date == end_date, "Depreciation End Date is wrong"
