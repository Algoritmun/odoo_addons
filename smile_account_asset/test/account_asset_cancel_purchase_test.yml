-
  I create a new asset
-
  !record {model: account.asset.asset, id: asset_to_cancel}:
    name: Software 1
    category_id: account_asset_category_digitalassets
    purchase_value: 72500.0
    salvage_value: 2500.0
    company_id: base.main_company
    currency_id: base.EUR
    supplier_id: base.res_partner_asus
    purchase_date: !eval time.strftime('%Y-%m-%d')
    in_service_date: !eval time.strftime('%Y-%m-%d')
    accounting_method: accounting_linear
    accounting_annuities: 5
    fiscal_method: fiscal_degressive
    fiscal_annuities: 2
    fiscal_rate: 50.0
    purchase_tax_ids: [account_tax_19_6_test]
-
  I confirm and validate this asset
-
  !python {model: account.asset.asset}: |
    asset_id = ref('asset_to_cancel')
    self.confirm_asset_purchase(cr, uid, asset_id, context)
    self.validate(cr, uid, asset_id, context)
-
  I post the first depreciation lines
-
  !python {model: account.asset.asset}: |
    asset = self.browse(cr, uid, ref('asset_to_cancel'), context)
    if asset.accounting_depreciation_line_ids:
      asset.accounting_depreciation_line_ids[0].post_depreciation_line()
      if asset.fiscal_depreciation_line_ids:
        asset.fiscal_depreciation_line_ids[0].post_depreciation_line()
-
  I cancel this asset
-
  !python {model: account.asset.asset}: |
    self.cancel_asset_purchase(cr, uid, ref('asset_to_cancel'), context)
-
  I check if state is cancel
-
  !assert {model: account.asset.asset, id: asset_to_cancel, string: Asset canceled after cancellation}:
    - state == 'cancel'
-
  I check if account moves are reversed for this asset
-
  !python {model: account.asset.asset}: |
    account_move_lines = self.browse(cr, uid, ref('asset_to_cancel'), context).account_move_line_ids
    assert not sum([line.debit - line.credit for line in account_move_lines]), "Asset cancellation failed: account moves sum is not null"
